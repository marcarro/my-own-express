This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
src/
  controllers/
    student.js
  db/
    fake/
      service.js
    dbService.js
    factory.js
  handlers/
    student.js
  routes/
    student.js
package.json
server.js

================================================================
Files
================================================================

================
File: src/controllers/student.js
================
class CustomerController {
    constructor(service) {
      this.service = service;
    }
  
    async getAll() {
      return this.service.getAllStudents();
    }
}
  
module.exports = CustomerController;

================
File: src/db/fake/service.js
================
const DBService = require('../dbService');

class FakeService extends DBService {
  constructor() {
    super();
    this.students = new Map();
    const dummyStudents = [
      { matricula: '1', nombre: 'John Doe', calificacion: 70, deuda: 0},
      { matricula: '2', nombre: 'Jane Smith', calificacion: 0, deuda: 0},
      { matricula: '3', nombre: 'Bob Johnson', calificacion: 70, deuda: 100},
      { matricula: '4', nombre: 'Alice Brown', calificacion: 0, deuda: 100},
    ];

    dummyStudents.forEach((student) => {
        this.students.set(student.matricula, student);
    });
  }

  async getAllStudents() {
    result = []
    this.students.forEach((matricula, student) => {

        if (student.calificacion >= 70) {
            if (student.deuda <= 0) {
                studentStatus = "Aprobado"
            } else {
                studentStatus = "Reestructura"
            }
        } else {
            if (student.deuda <= 0) {
                studentStatus = "Pendiente"
            } else {
                studentStatus = "Expulsado"
            }
        }

        result.push({
            "matricula": matricula,
            "nombre": student.name,
            "estatus": studentStatus
        })
    });

    return result;
  }
}

module.exports = FakeService;

================
File: src/db/dbService.js
================
class DBService {
    constructor() {
        this.initialized = false;
    }

    async getAllStudents() {
        if (!this.initialized) {
        throw new Error('Service not initialized');
        }
        throw new Error('Method not implemented');
    }
}
  
module.exports = DBService;

================
File: src/db/factory.js
================
const FakeService = require('./fake/service');

class DBFactory {
    static create() {
        return new FakeService();
    }
}

module.exports = DBFactory;

================
File: src/handlers/student.js
================
class StudentHttpHandler {
    constructor(customerController) {
      this.customerController = customerController;
    }
  
    async getAllStudents(req, res) {
      try {
        const customers = await this.customerController.getAll();
        res.json(customers);
      } catch (error) {
        res.status(500).json({ error: error.message });
      }
    }
}
  
  // Export the class directly
module.exports = StudentHttpHandler;

================
File: src/routes/student.js
================
const express = require('express');

const router = express.Router();
const StudentHttpHandler = require('../handlers/student');
const StudentServiceFactory = require('../db/factory');
const StudentController = require('../controllers/student');

// Create the service and controller
const studentService = StudentServiceFactory.create();
const studentController = new StudentController(studentService);

// Create the handler instance
const studentHandler = new StudentHttpHandler(studentController);

// Set up routes with bound handler methods
router.get('/', studentHandler.getAllStudents.bind(studentHandler));

module.exports = router;

================
File: package.json
================
{
  "name": "my-own-express",
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "start": "node server.js"
  },
  "author": "",
  "license": "ISC",
  "description": "",
  "dependencies": {
    "cors": "^2.8.5",
    "dotenv": "^16.4.7",
    "express": "^5.1.0",
    "helmet": "^8.1.0",
    "morgan": "^1.10.0"
  }
}

================
File: server.js
================
require('dotenv').config();
const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const morgan = require('morgan');
const customerRoutes = require('./src/routes/student');
// const errorMiddleware = require('./src/middleware/error');

const app = express();
app.use(express.json());
app.use(cors());
app.use(helmet());
app.use(morgan('dev'));

app.use('/api/students', customerRoutes);
// app.use(errorMiddleware);

const PORT = process.env.PORT || 3000;
// eslint-disable-next-line no-console
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));



================================================================
End of Codebase
================================================================
